services:

  postgres:
    container_name: postgres
    image: postgres:latest
    pull_policy: always
    volumes:
      - postgres:/var/lib/postgresql/data
    restart: unless-stopped
    environment:
      POSTGRES_DB: open-webui
      POSTGRES_USER: open-webui
      POSTGRES_PASSWORD: open-webui
    networks:
      - open-webui

  redis:
    container_name: redis
    image: docker.io/bitnami/redis:8.0.3
    pull_policy: always
    volumes:
      - redis:/bitnami/redis/data
    restart: unless-stopped
    environment:
      ALLOW_EMPTY_PASSWORD: yes
    networks:
      - open-webui

  mcpo:
    container_name: mcpo
    build:
      context: mcpo
      dockerfile: Containerfile
    restart: unless-stopped
    volumes:
      - mcpo:/data
    ports:
      - 8000:8000
    env_file:
      - mcpo/.env
    networks:
      - open-webui
      - internet

  open-webui:
    container_name: open-webui
    image: ghcr.io/open-webui/open-webui:main
    pull_policy: always
    volumes:
      - open-webui:/app/backend/data
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - mcpo
    environment:
      WEBUI_URL: https://${DOMAIN:-localhost}
      ENABLE_WEBSOCKET_SUPPORT: true
      WEBSOCKET_MANAGER: redis
      WEBSOCKET_REDIS_URL: redis://redis:6379/1
      DATABASE_URL: postgresql://open-webui:open-webui@postgres/open-webui
    networks:
      - open-webui

  caddy:
    container_name: caddy
    image: caddy
    pull_policy: always
    restart: unless-stopped
    depends_on:
      - open-webui
    ports:
      - 80:80
      - 443:443
    volumes:
      - caddy:/data
      - caddy:/config
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
    networks:
      - open-webui
      - internet

volumes:
  postgres:
  redis:
  mcpo:
  open-webui:
  caddy:

networks:
  open-webui:
    driver: bridge
    internal: true
  internet:
    driver: bridge
